{{- if .Values.initdb -}}
{{- if .Values.initdb.mysql.auto_db_user_create -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "application.name" $ }}-db-user-creation
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      containers:
      - name: {{ template "application.name" $ }}-db-user-creation
        image: mysql:8.0.29-debian
        command:
          - bash
          - -c
          - >
            echo "DB config parameters:";
            export DB_PROTO="$(cut -d':' -f2 <<<"${SPRING_DATASOURCE_URL}")";
            echo "DB Protocol: ${DB_PROTO}";
            TEMP_HOST="$(cut -d':' -f3 <<<"${SPRING_DATASOURCE_URL}")";
            export HOST="$(cut -d'/' -f3 <<<"${TEMP_HOST}")";
            echo "DB Host: ${HOST}";
            TEMP_PORT="$(cut -d':' -f4 <<<"${SPRING_DATASOURCE_URL}")";
            export PORT="$(cut -d'/' -f1 <<<"${TEMP_PORT}")";
            echo "DB Port: ${PORT}";
            TEMP_DB="$(cut -d'/' -f2 <<<"${TEMP_PORT}")";
            export DB="$(cut -d'?' -f1 <<<"${TEMP_DB}")";
            echo "DB: ${DB}";
            echo "Checking if DB is up";
            while ! mysqladmin ping -h ${HOST} --silent; do sleep 1; done;
              export SQLUSERCREATECOMMAND="CREATE USER IF NOT EXISTS '${SPRING_DATASOURCE_USERNAME}'@'%' IDENTIFIED BY '${SPRING_DATASOURCE_PASSWORD}';";
              echo "Executing DB user create";
              echo "${SQLUSERCREATECOMMAND}" | mysql --user ${USER_CREATE_USERNAME} --host ${HOST} --port ${PORT} --password=${USER_CREATE_PASSWORD};
              sleep 2;
              export SQLCOMMAND="GRANT ${SQL_PERMISSIONS} ON ${DB}.* TO '${SPRING_DATASOURCE_USERNAME}'@'%';";
              echo "The Grant Permissions Command to execute is: ${SQLCOMMAND}"
              echo "${SQLCOMMAND}" | mysql --user ${USER_CREATE_USERNAME} --host ${HOST} --port ${PORT} --password=${USER_CREATE_PASSWORD};
              sleep 2;
        env:
        - name: USER_CREATE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-{{ template "application.name" $ }}-app-db-user-create
              key: USER_CREATE_USERNAME
        - name: USER_CREATE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-{{ template "application.name" $ }}-app-db-user-create
              key: USER_CREATE_PASSWORD
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-{{ template "application.name" $ }}-rds-credentials
              key: DATASOURCE_USERNAME
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.environment }}-{{ template "application.name" $ }}-rds-credentials
              key: DATASOURCE_PASSWORD
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            configMapKeyRef:
              name: {{ template "application.name" $ }}-env-vars
              key: SPRING_DATASOURCE_URL
        - name: SQL_PERMISSIONS
          value: {{ .Values.initdb.mysql.permissions }}
      restartPolicy: Never
  backoffLimit: 2
---
apiVersion: 'kubernetes-client.io/v1'
kind: ExternalSecret
metadata:
  name: {{ .Values.environment }}-{{ template "application.name" $ }}-app-db-user-create
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backendType: secretsManager
  data:
    - key: {{ .Values.environment }}-app-db-user-create
      name: USER_CREATE_USERNAME
      property: USER_CREATE_USERNAME
    - key: {{ .Values.environment }}-app-db-user-create
      name: USER_CREATE_PASSWORD
      property: USER_CREATE_PASSWORD
{{- end -}}
{{- end -}}
